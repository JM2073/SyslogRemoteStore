@page "/"
@using SyslogRemoteStore.Web.Services
@inject ILogsViewModel vm
@inject LogFilterService fs

<style>

    table {
        width: 100%;
        border-collapse: collapse;
        border: 0;  
        background-color: #AEB5B6;
    }

    th, td {
        border: 1px solid #000;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #AEB5B6;
    }

    .buttons {
        text-align: center;
        margin-right: 10px; 
    }

    .buttons button {
        display: inline-block;
        margin: 5px;
        background-color: black;
        color: #fff;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }


    .nowrap{
    white-space: nowrap;
    }
    .mustwrap{
    word-break: break-word;
    }
    .info{
    color: @vm._configurationStore.InfoHex;
    }
    .error{
    color: @vm._configurationStore.ErrorHex;
    }
    .debug{
    color: @vm._configurationStore.DebugHex;
    }
    .warning{
    color: @vm._configurationStore.WarningHex;
    }
    
    
    
</style>


<div class="col-md-12" style="display: flex;">
    <div class="col-md-2"></div>
    <div class="col-md-8 justify-content-end">
        <div class="buttons">
            <button onclick="@vm.Export">Export All Logs</button>
            <button onclick="@vm.Delete">Delete Local Stored Logs</button>
        </div>
          <div>
      
              <div class="search-container">
                  <div class="search">
                      <input type="text" name="q" placeholder="Search by Source IP..." @bind="fs.SourceIp" @onkeydown="@Enter" />
                  </div>
      
                  <div class="searchBtn">
                      <button @onclick="filter" class="btn btn-primary" value="Search">Search</button>
                  </div>
      
              </div>
      
      
              <div style="padding-top: 15px">
              </div>
              
              <div class="severityFilter">
      
                      <label style="text-size-adjust:auto; margin-right: 10px;">
                          Severity Filter:
                      </label>
      
                      <input class="form-check-input" type="checkbox" @bind="@fs.Debug" id="debugCheck">
                      <label class="form-check-label" for="debugCheck">
                          Debug
                      </label>
      
                      <input class="form-check-input" type="checkbox" @bind="@fs.Error" id="ErrorCheck">
                      <label class="form-check-label" for="ErrorCheck">
                          Error
                      </label>
      
                      <input class="form-check-input" type="checkbox" @bind="@fs.Info" id="InfoCheck">
                      <label class="form-check-label" for="InfoCheck">
                          Info
                      </label>
      
                      <input class="form-check-input" type="checkbox" @bind="@fs.Warning" id="WarningCheck">
                      <label class="form-check-label" for="WarningCheck">
                          Warning
                      </label>
      
              </div>
          </div>

        <div style="padding-top: 20px">
        </div>

        <table id="LogTable">
            <tr>

                <th>Source IP</th>
                <th>Source Item</th>
                <th>Facilty</th>
                <th>Severity</th>
                <th>TimeStamp</th>

                <th>Message</th>
            </tr>
            @if (displayedLogs.Any() == false)
            {
                <div class="spinner-Con">
                    <div class="spinner"></div>
                </div>
            }
            else
            {
                @foreach (Log log in displayedLogs.OrderByDescending(x => x.TimeStamp).ToList())
                {
                    <tr class="@log.Severity">

                        <td>@log.GetFormatedIp()</td>
                        <td>@log.SourceItem</td>
                        <td>@log.Facilty</td>
                        <td>@log.Severity</td>
                        <td class="nowrap">@log.TimeStamp</td>

                        <td class="mustwrap">@log.Message</td>
                    </tr>
                }
            }
        </table>
    </div>
    <div class="col-md-2"></div>
</div>


@code {

    public List<Log> logs = new();
    public List<Log> displayedLogs = new();

    protected override async Task OnInitializedAsync()
    {
        vm._configurationStore.PropertyChanged += HandlePropertyChanged();
        vm.Radios.CollectionChanged += RadiosOnCollectionChanged;
        fs.PropertyChanged += HandleFilterChanged;
        foreach (T6S3 _radio in vm.Radios)
        {
            _radio.PropertyChanged += HandlePropertyChanged();
        }

        logs = vm.Radios.Where(x => x.IsHidden == false).SelectMany(x => x.Logs).OrderBy(x => x.TimeStamp).ToList();
        displayedLogs = logs;
        await base.OnInitializedAsync();
    }
    
    private void HandleFilterChanged(object? sender, PropertyChangedEventArgs e)
    {
        filter();
    }

    private void RadiosOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.OldItems != null)
        {
            foreach (INotifyPropertyChanged item in e.OldItems)
                item.PropertyChanged -= HandlePropertyChanged();
        }
        if (e.NewItems != null)
        {
            foreach (INotifyPropertyChanged item in e.NewItems)
                item.PropertyChanged += HandlePropertyChanged();
        }
    }

    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
                logs = vm.Radios.Where(x => x.IsHidden == false).SelectMany(x => x.Logs).ToList();
                filter();
            });
        };
    }
    public void Enter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            filter();
        }
    }
    
    public void filter()
    {
        displayedLogs = fs.FilterLog(logs);
        StateHasChanged();
    }
}