@page "/"
@using System.Collections.Specialized
@using SyslogRemoteStore.Web.Models
@inject ILogsViewModel vm
@inject LogFilterService fs
@using SyslogRemoteStore.Web.Services

<style>

    table {
        width: 100%;
        border-collapse: collapse;
        border: 0;  
        background-color: #AEB5B6;
    }

    th, td {
        border: 1px solid #000;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #AEB5B6;
    }

    .buttons {
        text-align: center;
        margin-right: 10px; 
    }

    .buttons button {
        display: inline-block;
        margin: 5px;
        background-color: black;
        color: #fff;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .SearchButton{
        display: inline-block;
        margin: 5px;
        background-color: black;
        color: #fff;
        padding: 2px 7px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .SearchBar{
        border: 1px solid #000;
        border-radius: 5px;
    }


    .nowrap{
    white-space: nowrap;
    }
    .mustwrap{
    word-break: break-word;
    }
    .info{
    color: @vm._configurationStore.InfoHex;
    }
    .error{
    color: @vm._configurationStore.ErrorHex;
    }
    .debug{
    color: @vm._configurationStore.DebugHex;
    }
    .warning{
    color: @vm._configurationStore.WarningHex;
    }
    
    
    
</style>


<div class="col-md-12" style="display: flex;">
    <div class="col-md-2"></div>
    <div class="col-md-8 justify-content-end">
        <div class="buttons">
            <button onclick="@vm.Export">Export All Logs</button>
            <button onclick="@vm.Delete">Delete Local Stored Logs</button>
        </div>

        <div>
            <input class="SearchBar" type="text" name="q" placeholder="Search..." @bind="fs.SourceIp"/>
            <button class="SearchButton" @onclick="filter" value="Search">Search</button>
        </div>

        <div style="padding-top: 20px">
        </div>

        <table id="LogTable">
            <tr>
             
                <th>Source IP</th>
                <th>Source Item</th>
                <th>Facilty</th>
                <th>Severity</th>
                <th>TimeStamp</th>
         
                <th>Message</th>
            </tr>
            @if (displayedLogs.Any() == false)
            {
                <div class="spinner-Con">
                    <div class="spinner"></div>
                </div>
            }
            else
            {
                @foreach (Log log in displayedLogs.OrderByDescending(x=>x.TimeStamp).ToList())
                {
                    <tr class="@log.Severity">

                        <td>@log.GetFormatedIp()</td>
                        <td>@log.SourceItem</td>
                        <td>@log.Facilty</td>
                        <td>@log.Severity</td>
                        <td class="nowrap">@log.TimeStamp</td>

                        <td class="mustwrap">@log.Message</td>
                    </tr>
                }
            }
        </table>
    </div>
    <div class="col-md-2"></div>
</div>


@code {

    public List<Log> logs = new List<Log>();
    public List<Log> displayedLogs = new List<Log>();

    protected override async Task OnInitializedAsync()
    {
        vm._configurationStore.PropertyChanged += HandlePropertyChanged();
        vm.Radios.CollectionChanged += RadiosOnCollectionChanged;
        foreach (T6S3 _radio in vm.Radios)
        {
            _radio.PropertyChanged += HandlePropertyChanged();
        }

        logs = vm.Radios.Where(x=>x.IsHidden == false).SelectMany(x => x.Logs).OrderBy(x => x.TimeStamp).ToList();
        await base.OnInitializedAsync();
    }

    private void RadiosOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.OldItems != null)
        {
            foreach (INotifyPropertyChanged item in e.OldItems)
                item.PropertyChanged -= HandlePropertyChanged();
        }
        if (e.NewItems != null)
        {
            foreach (INotifyPropertyChanged item in e.NewItems)
                item.PropertyChanged += HandlePropertyChanged();
        }
    }

    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) => { await InvokeAsync(() => 
        {
            StateHasChanged(); 
            logs = vm.Radios.Where(x => x.IsHidden == false).SelectMany(x => x.Logs).ToList();
            filter();
        }); 

        };
    }

    public void filter()
    {

        if (logs!= null && string.IsNullOrWhiteSpace(fs.SourceIp) == false)
        {
            displayedLogs = fs.FilterLog(logs);

        }
        else
        {
            displayedLogs = logs;
        }
        StateHasChanged();

    }

  

}