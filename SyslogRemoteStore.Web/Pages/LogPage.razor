@page "/LogView"
@using System.Collections.Specialized
@using SyslogRemoteStore.Web.Models
@inject ILogsViewModel vm
@inject LogFilterService fs
@using SyslogRemoteStore.Web.Services
@using System.Text;

<style>
    table {
        width: 100%;
        border-collapse: collapse;
    border: 0;
    }

    th, td {
        border: 0px solid #000;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f0f0f0;
    }

    .buttons {
        text-align: center;
    }

    .buttons button {
        display: inline-block;
        margin: 5px;
    }
    .nowrap{
    white-space: nowrap;
    }
    .mustwrap{
    word-break: break-word;
    }
</style>
<div class="col-md-12" style="display: flex">
    <div class="col-md-2"></div>
    <div class="col-md-8 justify-content-end">
        <div class="buttons">
            <button onclick="@vm.Export">Export</button>
            <button onclick="@vm.Delete">Delete</button>
        </div>

        <div>
            <input type="text" name="q" placeholder="Search..." @bind="fs.SourceIp"/>
            <button @onclick="filter" value="Search">Search</button>
        </div>

        <table id="LogTable">
            <tr>
                <th>Received</th>
                <th>Source IP</th>
                <th>Source Item</th>
                <th>Facilty</th>
                <th>Severity</th>
                <th>TimeStamp</th>
                <th>Tag</th>
                <th>Message</th>
            </tr>
            @foreach (Log log in displayedLogs)
            {
                <tr>
                    <td>@log.Received</td>
                    <td>@log.SourceIp</td>
                    <td>@log.SourceItem</td>
                    <td class="nowrap">@log.Facilty</td>
                    <td>@log.Severity</td>
                    <td class="nowrap">@log.TimeStamp</td>
                    <td>@log.Tag</td>
                    <td class="mustwrap">@log.Message</td>
                </tr>
            }
        </table>
    </div>
    <div class="col-md-2"></div>
</div>


@code {

    public List<Log> logs = new List<Log>();
    public List<Log> displayedLogs = new List<Log>();
    FileCreationService fc = new FileCreationService();

    protected override async Task OnInitializedAsync()
    {
        vm.Radios.CollectionChanged += RadiosOnCollectionChanged;
        foreach (T6S3 _radio in vm.Radios)
        {
            _radio.PropertyChanged += HandlePropertyChanged();
        }

        logs = vm.Radios.SelectMany(x => x.Logs).OrderBy(x => x.TimeStamp).ToList();

        await base.OnInitializedAsync();
    }

    private void RadiosOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.OldItems != null)
        {
            foreach (INotifyPropertyChanged item in e.OldItems)
                item.PropertyChanged -= HandlePropertyChanged();
        }
        if (e.NewItems != null)
        {
            foreach (INotifyPropertyChanged item in e.NewItems)
                item.PropertyChanged += HandlePropertyChanged();
        }
    }

    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) => {await InvokeAsync(() => 
        {
            StateHasChanged(); 
            logs = vm.Radios.SelectMany(x => x.Logs).OrderBy(x => x.TimeStamp).ToList();
            filter();
            fc.CreateFile(logs ,"Syslog");
            
        }); 

        };
    }

    public void filter()
    {

        if (logs!= null && string.IsNullOrWhiteSpace(fs.SourceIp) == false)
        {
            displayedLogs = fs.FilterLog(logs);

        }
        else
        {
            displayedLogs = logs;
        }
        StateHasChanged();

    }

}