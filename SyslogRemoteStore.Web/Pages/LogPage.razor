@page "/LogView"
@using System.Collections.Specialized
@inject ILogsViewModel vm

<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        border: 1px solid #000;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f0f0f0;
    }

    .buttons {
        text-align: center;
    }

    .buttons button {
        display: inline-block;
        margin: 5px;
    }
</style>

<div>
    <div class="buttons">
        <button onclick="@vm.Export">Export</button>
        <button onclick="@vm.Delete">Delete</button>
    </div>

    <form action="/search" method="get">
        <input type="text" name="q" placeholder="Search..." />
        <input type="submit" value="Search" />
    </form> 

    <table id="LogTable">
        <tr>
            <th>Received</th>
            <th>Source IP</th>
            <th>Source Item</th>
            <th>Facilty</th>
            <th>Severity</th>
            <th>TimeStamp</th>
            <th>Tag</th>
            <th>Message</th>
        </tr>
        @foreach (var log in vm.Radios.SelectMany(x=>x.Logs).OrderBy(x=>x.TimeStamp))
        {
          
                <tr>
                    <td>@log.Received</td>
                    <td>@log.SourceIp</td>
                    <td>@log.SourceItem</td>
                    <td>@log.Facilty</td>
                    <td>@log.Severity</td>
                    <td>@log.TimeStamp</td>
                    <td>@log.Tag</td>
                    <td>@log.Message</td>
                </tr>
          
    
        }
    </table>
</div>


@code {
    protected override async Task OnInitializedAsync()
    {
        HandleSubscription();
    
        await base.OnInitializedAsync();
    }

    void HandleSubscription()
    {
        vm.Radios.CollectionChanged += RadiosOnCollectionChanged;
    }

    private void RadiosOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.OldItems != null)
        {
            foreach (INotifyPropertyChanged item in e.OldItems)
                item.PropertyChanged -= HandlePropertyChanged();
        }
        if (e.NewItems != null)
        {
            foreach (INotifyPropertyChanged item in e.NewItems)
                item.PropertyChanged += HandlePropertyChanged();
        }
    }

    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
    }

}