@page "/"
@using SyslogRemoteStore.Web.Services
@inject ILogsViewModel vm
@inject LogFilterService fs

<style>
    table {
        width: 100%;
        border-collapse: collapse;
    border: 0;
    }

    th, td {
        border: 0px solid #000;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f0f0f0;
    }

    .buttons {
        text-align: center;
    }

    .buttons button {
        display: inline-block;
        margin: 5px;
    }
    .nowrap{
    white-space: nowrap;
    }
    .mustwrap{
    word-break: break-word;
    }
    .info{
    color: @vm._configurationStore.InfoHex;
    }
    .error{
    color: @vm._configurationStore.ErrorHex;
    }
    .debug{
    color: @vm._configurationStore.DebugHex;
    }
    .warning{
    color: @vm._configurationStore.WarningHex;
    }
    
    
    
</style>
<div class="col-md-12" style="display: flex">


        <div class="col-md-2"></div>
        <div class="col-md-8 justify-content-end">
            <div class="buttons">
                <button onclick="@vm.Export">Export</button>
                <button onclick="@vm.Delete">Delete</button>
            </div>

            <div>

                <div>
                <input type="text" name="q" placeholder="Search by source IP..." @bind="fs.SourceIp" @onkeydown="@Enter"/>
                    
                    | Severity filter
                    <input class="form-check-input" type="checkbox" @bind="@fs.Debug" id="debugCheck">
                    <label class="form-check-label" for="debugCheck">
                        Debug
                    </label>
                    <input class="form-check-input" type="checkbox" @bind="@fs.Error" id="ErrorCheck">
                    <label class="form-check-label" for="ErrorCheck">
                        Error
                    </label>
                    <input class="form-check-input" type="checkbox" @bind="@fs.Info" id="InfoCheck">
                    <label class="form-check-label" for="InfoCheck">
                        Info
                    </label>
                    <input class="form-check-input" type="checkbox" @bind="@fs.Warning" id="WarningCheck">
                <label class="form-check-label" for="WarningCheck">
                    Warning
                </label>
                |
                    <button @onclick="filter" class="btn btn-primary" value="Search">Search</button>

                </div>

            </div>

            <table id="LogTable">
                <tr>
                    <th>Source IP</th>
                    <th>Source Item</th>
                    <th>Facilty</th>
                    <th>Severity</th>
                    <th>TimeStamp</th>
                    <th>Message</th>
                </tr>
                    @if (displayedLogs.Any() == false)
                    {
                        <div class="spinner-Con">
                            <div class="spinner"></div>
                            <h1>LOADING</h1>
                        </div>
                    }
                    else
                    {
                        @foreach (Log log in displayedLogs.OrderByDescending(x => x.TimeStamp).ToList())
                        {
                            <tr class="@log.Severity">
                                <td>@log.GetFormatedIp()</td>
                                <td>@log.SourceItem</td>
                                <td>@log.Facilty</td>
                                <td>@log.Severity</td>
                                <td class="nowrap">@log.TimeStamp</td>
                                <td class="mustwrap">@log.Message</td>
                            </tr>
                        }
                    }
            </table>
        </div>
        <div class="col-md-2"></div>
</div>

@code {

    public List<Log> logs = new();
    public List<Log> displayedLogs = new();

    protected override async Task OnInitializedAsync()
    {
        fs.PropertyChanged += HandleFilterChanged;
        vm.Radios.CollectionChanged += RadiosOnCollectionChanged;

        foreach (T6S3 _radio in vm.Radios)
        {
            _radio.PropertyChanged += HandlePropertyChanged();
        }

        PopulateAllLogs();

        await base.OnInitializedAsync();
    }

    private void HandleFilterChanged(object? sender, PropertyChangedEventArgs e)
    {
        filter();
    }

    private void PopulateAllLogs()
    {
        logs = vm.Radios.Where(x => x.IsHidden == false).SelectMany(x => x.Logs).ToList();
    }

    private void RadiosOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.OldItems != null)
        {
            foreach (INotifyPropertyChanged item in e.OldItems)
                item.PropertyChanged -= HandlePropertyChanged();
        }
        if (e.NewItems != null)
        {
            foreach (INotifyPropertyChanged item in e.NewItems)
                item.PropertyChanged += HandlePropertyChanged();
        }
    }

    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
                PopulateAllLogs();
                filter();
            });
        };
    }

    public void filter()
    {
        displayedLogs = fs.FilterLog(logs);
        StateHasChanged();
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            filter();
        }
    }


}