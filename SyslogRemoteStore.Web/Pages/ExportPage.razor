﻿@using System;
@using SyslogRemoteStore.Web.Models
@inject FileCreationService fc
@inject FileZipService fz
@inject IRadioViewModel vm
@inject CollectionStore cs
@inject IJSRuntime JS
@using SyslogRemoteStore.Web.Services
@using System.Collections.Specialized



@page "/ExportPage"

<html>
<h3>ExportPage</h3>

<button @onclick="DownloadFile">Zip Files</button>


</html>

@code
{

    private string ZipFiles()
    {
        List<string> filesToZip = new List<string>();

        foreach (IGrouping<string, IT6S3> radioIpGroups in cs.Radios.GroupBy(x => x.GetFormatedIp()))
        {

            foreach (IT6S3 radio in radioIpGroups)
            {
                fc.CreateFile(radio.Logs, radio.GetFormatedIp()); //fc.CreateFile(radio.Logs, radio.GetFormatedIp(),radio.Port.ToString());
                filesToZip.Add(fc.GetFileName(radio.GetFormatedIp()));
            }
        }


        string zipFilePath = String.Format(@"{0}{1}", AppDomain.CurrentDomain.BaseDirectory, "SyslogFiles.zip"); ;

        fz.ZipFiles(zipFilePath, filesToZip);
        foreach (string file in filesToZip)
        {
            File.Delete(file);
        }

        return zipFilePath;
    }


    private Stream GetFileStream()
    {
        byte[] binaryData = File.ReadAllBytes(ZipFiles());

        MemoryStream fileStream = new MemoryStream(binaryData);
        return fileStream;
    }
    
    

    private async Task DownloadFile()
    {
        try
        {
            Stream fileStream = GetFileStream();
            using DotNetStreamReference streamRef = new DotNetStreamReference(stream: fileStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", ZipFiles(), streamRef);
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Cannot do it :(");
        }

    }

    }
   
    
}



           
 