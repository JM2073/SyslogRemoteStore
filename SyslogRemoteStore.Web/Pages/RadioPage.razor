@page "/RadioPage/{RadioId}"
@inject IRadioViewModel vm
@inject RadioFilterService fs
@using SyslogRemoteStore.Web.Services

    <style>
         
        .topRow-container{
            display: flex;
            flex-direction: row;
            align-items: center;
            margin-right: 10px;
            right: 25px;
        }

        .statsTable{
            border: 3px solid black;
            padding:5px;
            margin-left: 50px;
        }

        .image{
            width: 400px;
            border: 3px solid black;
            margin-left: 400px;
        }

        .search-container {
            display: flex;
            align-items: center;
        }       

        .search input {
            margin-right: 10px;
            padding: 5px;
            border: 1px solid black;
            border-radius: 5px;
        }

        .searchBtn button {
            display: inline-block;
            margin: 5px;
            background-color: black;
            color: #fff;
            padding: 2px 7px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .severityFilter {
            display: flex;
            flex-direction: row;
            align-items: center;
            margin-right: 25px;
        }

        .severityFilter input{
            margin: 5px;
        }

        .severityFilter input:checked {
            background-color: black;
            border-color: grey;
        }

        .form-check-label, .btn {
            margin-right: 10px;
        }

        .hideRadioBtn {
            display: inline-block;
            margin: 5px;
            background-color: black;
            color: #fff;
            padding: 2px 7px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
     
        .tableForIps {
            border-collapse: collapse;
            margin: 25px 0;
            font-size: 0.9em;
            font-family: sans-serif;
            min-width: 400px;
        }

        .tableForIps tr {
            background-color: #AEB5B6;
            text-align: left;
        }

        .tableForIps th{
            border: 1px solid black; 
            padding: 8px; 
            text-align: left;
        }
        .tableForIps td {
            padding: 12px 15px;
        }

        .tableForIps tr.dataRow:hover {
            background-color: #f5f5f5; 
        }

        .info {
            color: @vm._configurationStore.InfoHex;
        }

        .error {
            color: @vm._configurationStore.ErrorHex;
        }

        .debug {
            color: @vm._configurationStore.DebugHex;
        }

        .warning {
            color: @vm._configurationStore.WarningHex;
        }

    </style>




    <div style="padding-top: 15px">
    </div>

    <div class="topRow-container">

        <div class="statsTable">
            <table>
                <thead>
                    <tr> 
                        <th>Radio IP Address: @($"{vm.Radio.GetFormatedIp()}:{vm.Radio.Port}")</th>
                    </tr>

                    <tr>
                    <th>Transport Protocol: @vm.Radio.Socket.ProtocolType.ToString()</th>
                    </tr>

                    <tr>
                        <th>IP Version: @vm.Radio.GetIpvType()</th>
                    </tr>

                    <tr>
                        <th>Socket Status: @vm.Radio.GetSocketStatus()</th>
                    </tr>
                </thead>
            </table>

        </div>
    
        <div class="image">
            <img src="T6S3.jpg" alt="Your Image">
        </div>
     
    </div>


    <div style="padding-top: 30px">
    </div>

    <div>

        <div class="search-container">
            <div class="search">
                <input type="text" name="q" placeholder="Search by message..." @bind="fs.Message" @onkeydown="@Enter" />
            </div>

            <div class="searchBtn">
                <button @onclick="filter" class="btn btn-primary" value="Search">Search</button>
            </div>

        </div>


        <div style="padding-top: 15px">
        </div>
        
        <div class="severityFilter">

                <label style="text-size-adjust:auto; margin-right: 10px;">
                    Severity Filter:
                </label>

                <input class="form-check-input" type="checkbox" @bind="@fs.Debug" id="debugCheck">
                <label class="form-check-label" for="debugCheck">
                    Debug
                </label>

                <input class="form-check-input" type="checkbox" @bind="@fs.Error" id="ErrorCheck">
                <label class="form-check-label" for="ErrorCheck">
                    Error
                </label>

                <input class="form-check-input" type="checkbox" @bind="@fs.Info" id="InfoCheck">
                <label class="form-check-label" for="InfoCheck">
                    Info
                </label>

                <input class="form-check-input" type="checkbox" @bind="@fs.Warning" id="WarningCheck">
                <label class="form-check-label" for="WarningCheck">
                    Warning
                </label>

            <button @onclick="HideRadio" id="liveToastBtn" class="hideRadioBtn" value="Hide Radio">Hide Radio</button>
        </div>
    </div>

@if (displayedLogs.Any() is false)
{
    <div class="spinner-Con">
        <div class="spinner"></div>
        <h1>LOADING</h1>
    </div>
}
else
{

        <div style="padding-top: 15px">
        </div>
    <div>
        <table class="tableForIps" style="width: 100%; border: 0; overflow-y: scroll; border: 1px solid black;">
            <tr>

                <th>Source IP</th>
                <th>Source Item</th>
                <th>Facility</th>
                <th>Severity</th>
                <th>TimeStamp</th>
                <th>Message</th>
            </tr>

            @foreach (Log log in displayedLogs.OrderByDescending(x => x.TimeStamp).ToList())
            {
                <tr class="@log.Severity dataRow">
                    <td>@log.GetFormatedIp()</td>
                    <td>@log.SourceItem</td>
                    <td>@log.Facilty</td>
                    <td>@log.Severity</td>
                    <td class="nowrap">@log.TimeStamp</td>
                    <td class="mustwrap">@log.Message</td>
                </tr>
            }
        </table>
    </div>

}
<InformativeDialog @ref="informativeDialog" OnClosed="HandleInformativeClosed"></InformativeDialog>

@code
{
    private InformativeDialog informativeDialog;
    [Parameter]
    public string RadioId { get; set; }
    public List<Log> logs = new List<Log>();
    public List<Log> displayedLogs = new List<Log>();

    protected override async Task OnParametersSetAsync()
    {
        vm.RadioId = RadioId;
        logs = vm.Radio.Logs.ToList();
        displayedLogs = logs;
        
        vm.Radio.PropertyChanged += HandlePropertyChanged();
        vm._configurationStore.PropertyChanged += HandlePropertyChanged();
        fs.PropertyChanged += HandleFilterChanged;
    }
    
    private void HandleFilterChanged(object? sender, PropertyChangedEventArgs e)
    {
        filter();
    }

    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) => { await InvokeAsync(() => 
                    {
                        StateHasChanged();
                        logs = vm.Radio.Logs.ToList();
                        filter();
                    });
        };
    }

    public void filter()
    {
        displayedLogs = fs.FilterLog(logs);
        StateHasChanged();
    }
    public void Enter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            filter();
        }
    }

    private void HideRadio()
    {
        vm.HideRadio();
        InvokeAsync(() => { StateHasChanged(); });
        informativeDialog.Show("The Radio has been hidden.", "gray");
    }
    private async Task HandleInformativeClosed()
    {
    }
}
