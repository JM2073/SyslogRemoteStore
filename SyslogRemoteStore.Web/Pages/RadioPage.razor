@page "/RadioPage/{RadioId}"
@inject IRadioViewModel vm
@inject LogFilterService fs
@using SyslogRemoteStore.Web.Services

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        .container {
            display: flex;
        }
        .table-container {
            width: 50%;
        }
        .image-container {
            width: 50%;
        }
        table {
            border-collapse: collapse;
            border: 0;
        }
        .buttons button {
            display: inline-block;
            margin: 5px;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 10px;
        }
        th {
            background-color: #f2f2f2;
        }
        td {
            height: 80px;
        }
        .defaulttable {
            height: 150px;
            overflow-y: scroll;
            border-bottom: 1px solid #ddd;
        }
        .defaulttable th,
        .defaulttable td,
        .defaulttable thead th,
        .defaulttable tbody + tbody {
            border: 0;
        }
        .left {
            text-align: left;
            border: 3px solid green;
        }
        .buttons {
            text-align: center;
        }
        body {
            text-align: left;
            margin: 0; /* Remove default body margin */
        }
        form {
            width: 300px;
            margin: 0; /* Remove margin to align the form to the left */
        }
        th, td {
            border: 1px solid #000;
            padding: 8px;
            text-align: left;
        }
        label {
            display: block;
            margin-top: 10px;
            text-align: left;
        }
        input {
            width: 100%;
            padding: 5px;
            margin-top: 5px;
        }
        .button {
            border: none;
            color: white;
            padding: 16px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            transition-duration: 0.4s;
            cursor: pointer;
        }
        .button1 {
            background-color: white;
            color: black;
            border: 2px solid #4CAF50;
        }
        .button1:hover {
            background-color: #4CAF50;
            color: white;
        }
        .button2 {
            background-color: white;
            color: black;
            border: 2px solid #008CBA;
        }
        .button2:hover {
            background-color: grey;
            color: white;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="table-container">
        <table class="defaulttable" style="border: 0;">
            <thead>
            <tr>
                <th>Radio IP Address: @vm.Radio.GetFormatedIp()</th>
            </tr>
            <tr>
                <th>Transport Protocol: @vm.Radio.Socket.ProtocolType.ToString()</th>
            </tr>
            <tr>
                <th>IP Version: @vm.Radio.GetIpvType()</th>
            </tr>
            <tr>
                <th>Socket Status: @vm.Radio.GetSocketStatus()</th>
            </tr>
            </thead>
        </table>
    </div>
    <div class="image-container">
        <img src="T6S3.jpg" alt="Your Image" style="height: auto; max-width: 100%;">
    </div>
</div>
<form action="/search" method="get">
    <div style="display: inline-block;">
        <input type="text" name="q" placeholder="Search..." @bind="fs.SourceIp" />
    </div>
    <div style="display: inline-block;">
            <button @onclick="filter" value="Search">Search</button>
    </div>
</form>
<div>
    <table class="defaulttable" style="width: 100%; border: 0; overflow-y: scroll">
        <tr>
            <th>Received</th>
            <th>Source IP</th>
            <th>Source Item</th>
            <th>Facility</th>
            <th>Severity</th>
            <th>TimeStamp</th>
            <th>Tag</th>
            <th>Message</th>
        </tr>
            @foreach (Log log in displayedLogs)
                   {
                       <tr>
                           <td>@log.Received</td>
                           <td>@log.SourceIp</td>
                           <td>@log.SourceItem</td>
                           <td class="nowrap">@log.Facilty</td>
                           <td>@log.Severity</td>
                           <td class="nowrap">@log.TimeStamp</td>
                           <td>@log.Tag</td>
                           <td class="mustwrap">@log.Message</td>
                       </tr>
                   }
    </table>
</div>
</body>
@code
{
    [Parameter]
    public string RadioId { get; set; }
    public List<Log> logs = new List<Log>();
    public List<Log> displayedLogs = new List<Log>();

    protected override async Task OnParametersSetAsync()
    {
        vm.RadioId = RadioId;

        vm.Radio.PropertyChanged += HandlePropertyChanged();

        logs = vm.Radio.Logs.ToList();

    }
    
    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) => { await InvokeAsync(() => 
                    {
                        StateHasChanged();
                        logs = vm.Radio.Logs.ToList();
                        filter();
                    });
        };
        //{ StateHasChanged(); }); };
    }

    public void filter()
    {

        if (logs != null && string.IsNullOrWhiteSpace(fs.SourceIp) == false)
        {
            displayedLogs = fs.FilterLog(logs);

        }
        else
        {
            displayedLogs = logs;
        }
        //StateHasChanged();

    }
   


}
