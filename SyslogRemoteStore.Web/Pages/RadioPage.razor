@page "/RadioPage/{RadioId}"
@inject IRadioViewModel vm
@inject RadioFilterService fs
@using SyslogRemoteStore.Web.Services

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        .container {
            display: flex;
        }
        .table-container {
            width: 50%;
        }
        .image-container {
            width: 50%;
        }
        table {
            border-collapse: collapse;
            border: 0;
        }
        .buttons button {
            display: inline-block;
            margin: 5px;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 10px;
        }
        th {
            background-color: #f2f2f2;
        }
        td {
            height: 80px;
        }
        .defaulttable {
            height: 150px;
            overflow-y: scroll;
            border-bottom: 1px solid #ddd;
        }
        .defaulttable th,
        .defaulttable td,
        .defaulttable thead th,
        .defaulttable tbody + tbody {
            border: 0;
        }
        .left {
            text-align: left;
            border: 3px solid green;
        }
        .buttons {
            text-align: center;
        }
        body {
            text-align: left;
            margin: 0; /* Remove default body margin */
        }
        form {
            width: 300px;
            margin: 0; /* Remove margin to align the form to the left */
        }
        th, td {
            border: 1px solid #000;
            padding: 8px;
            text-align: left;
        }
        label {
            display: block;
            margin-top: 10px;
            text-align: left;
        }
        input {
            width: 100%;
            padding: 5px;
            margin-top: 5px;
        }
        .button {
            border: none;
            color: white;
            padding: 16px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            transition-duration: 0.4s;
            cursor: pointer;
        }
        .button1 {
            background-color: white;
            color: black;
            border: 2px solid #4CAF50;
        }
        .button1:hover {
            background-color: #4CAF50;
            color: white;
        }
        .button2 {
            background-color: white;
            color: black;
            border: 2px solid #008CBA;
        }
        .button2:hover {
            background-color: grey;
            color: white;
        }
    .info{
    color: @vm._configurationStore.InfoHex;
    }
    .error{
    color: @vm._configurationStore.ErrorHex;
    }
    .debug{
    color: @vm._configurationStore.DebugHex;
    }
    .warning{
    color: @vm._configurationStore.WarningHex;
    }
    </style>
</head>
<body>
<div class="container">
    <div class="table-container">
        <table class="defaulttable" style="border: 0;">
            <thead>
            <tr>
                <th>Radio IP Address: @($"{vm.Radio.GetFormatedIp()}:{vm.Radio.Port}")</th>
            </tr>
            <tr>
                <th>Transport Protocol: @vm.Radio.Socket.ProtocolType.ToString()</th>
            </tr>
            <tr>
                <th>IP Version: @vm.Radio.GetIpvType()</th>
            </tr>
            <tr>
                <th>Socket Status: @vm.Radio.GetSocketStatus()</th>
            </tr>
            </thead>
        </table>
    </div>
    <div class="image-container">
        <img src="T6S3.jpg" alt="Your Image" style="height: auto; max-width: 100%;">
    </div>
</div>
<div>
    <input type="text" name="q" placeholder="Search..." @bind="fs.Message" @onkeydown="@Enter" />
    <button @onclick="filter" class="btn btn-primary" value="Search">Search</button>
    <button @onclick="HideRadio" id="liveToastBtn" class="btn btn-primary" value="Hide Radio">Hide Radio</button>
</div>
@if (displayedLogs.Any() is false)
{
    <div class="spinner-Con">
        <div class="spinner"></div>
        <h1>LOADING</h1>
    </div>
}
else
{
    <div>
        <table class="defaulttable" style="width: 100%; border: 0; overflow-y: scroll">
            <tr>

                <th>Source IP</th>
                <th>Source Item</th>
                <th>Facility</th>
                <th>Severity</th>
                <th>TimeStamp</th>
                <th>Message</th>
            </tr>
            @foreach (Log log in displayedLogs.OrderByDescending(x => x.TimeStamp).ToList())
            {
                <tr class="@log.Severity">
                    <td>@log.GetFormatedIp()</td>
                    <td>@log.SourceItem</td>
                    <td>@log.Facilty</td>
                    <td>@log.Severity</td>
                    <td class="nowrap">@log.TimeStamp</td>
                    <td class="mustwrap">@log.Message</td>
                </tr>
            }
        </table>
    </div>

}
<InformativeDialog @ref="informativeDialog" OnClosed="HandleInformativeClosed"></InformativeDialog>

</body>
@code
{
    private InformativeDialog informativeDialog;
    [Parameter]
    public string RadioId { get; set; }
    public List<Log> logs = new List<Log>();
    public List<Log> displayedLogs = new List<Log>();

    protected override async Task OnParametersSetAsync()
    {
        vm.RadioId = RadioId;
        vm.Radio.PropertyChanged += HandlePropertyChanged();
        logs = vm.Radio.Logs.ToList();
        vm._configurationStore.PropertyChanged += HandlePropertyChanged();
    }
    
    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) => { await InvokeAsync(() => 
                    {
                        StateHasChanged();
                        logs = vm.Radio.Logs.ToList();
                        filter();
                    });
        };
    }

    public void filter()
    {
        if (logs != null && string.IsNullOrWhiteSpace(fs.Message) == false)
        {
            displayedLogs = fs.FilterLog(logs);
        }
        else
        {
            displayedLogs = logs;
        }
    }
    public void Enter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            filter();
        }
    }

    private void HideRadio()
    {
        vm.HideRadio();
        InvokeAsync(() => { StateHasChanged(); });
        informativeDialog.Show("The Radio has been hidden.", "gray");
    }
    private async Task HandleInformativeClosed()
    {
    }
}
