@page "/SettingsPage"
@using SPType = System.Net.Sockets.ProtocolType
@using SyslogRemoteStore.Web.Enums
@inject ISettingsViewModel vm
@inject CollectionStore cs

<style>

    label {
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }

    table {
       
        border-collapse: collapse;
        border: 3px;
        margin-left: auto;
        margin-right: auto;
    }
     
    th, td {
        border: 1px solid #000;
        padding: 8px;
        text-align: left;
    }
     
    th {
        background-color: #AEB5B6;
    }
         
    label {
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }

    input[type="text"] {
        padding: 8px;
        width: 200px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    label {
        display: block; 
        font-weight: bold;
    }

    select {
        left: 20px;
        width: 200px;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    label {
        display: block; 
        font-weight: bold;
        margin-bottom: 5px;
    }

    input[type="number"] {
        width: 200px; 
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    ol {
        padding-left: 20px; 
    }

    li {
        margin: 5px 0; 
    }

    input[type="submit"] {
        background-color: black; 
        color: white; 
        padding: 10px 20px; 
        border: none; 
        border-radius: 5px; 
        cursor: pointer; 
    }

    input[type="submit"]:hover {
        background-color: dimgray;
    }

    section {
        display: grid;
        grid-template-columns: 1fr 1fr; 
        grid-template-rows: auto auto;
        text-align: center;
        grid-gap: 10px; 
        grid-auto-flow: column; 
        height: 150px;
    }

    .row:after {
        content: "";
        display: table;
        clear: both;
    }
    
    label.Header{
            font-size: x-large;
            text-align: center;
    }

    .btn.btn-primary {
        background-color: black; 
        color: #fff; 
        padding: 5px 10px; 
        border: none; 
        border-radius: 5px; 
        cursor: pointer;
    }

    </style>

<div>



    <div class="col-md-12" style="display: flex">
        <div class="col-md-2"></div>
        <div class="col-md-8  justify-content-end">
            <EditForm model="@vm" OnSubmit="@preFormSubmit">


                <div style="padding-top: 30px">
                </div>

                <div>
                    <label style="text-align: center;" for="Header">Change Syslog Message Severity Colours</label>
                </div>

                <div style="padding-top: 15px">
                </div>

                <section>
                    <div>
                        <label for="Debug">Debug:</label>
                        <input type="color" id="head" name="head" @bind="@vm.DebugHex"/>
                    </div>
                    <div>
                        <label for="Info">Info:</label>
                        <input type="color" id="head" name="head" @bind="@vm.InfoHex">
                    </div>
                    <div>
                        <label for="Warning">Warning:</label>
                        <input type="color" id="head" name="head" @bind="@vm.WarningHex">
                    </div>
                    <div>
                        <label for="Error">Error:</label>
                        <input type="color" id="head" name="head" @bind="@vm.ErrorHex">
                    </div>
                </section>

                <div style="padding-top: 25px">
                </div>

                <div class="row">

                    <div class="col-md-4 spacerE  ">
                        <label for="ProtocolTypeDropdown">Change Listening Proticals:</label>
                        <select id="ProtocolTypeDropdown" @bind="vm.ListeningProtocolType">
                            @foreach (object? option in Enum.GetValues(typeof(ProtocolType)))
                            {
                                <option value="@((ProtocolType)option)">@(((ProtocolType)option).ToString().ToUpper())</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-4 spacerE ">
                        <label for="AvailableIpAddressDropdown">IP Addresses :</label>
                        <select id="AvailableIpAddressDropdown" @bind="vm.IpAddress">
                            @foreach (string ip in vm.AvailableIpAddress)
                            {
                                <option value="@ip">@ip</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-4 spacerE ">
                        <label for="integerInput">Change Listen Port:</label>
                        <input type="number" id="integerInput" name="integerInput" @bind="vm.Port">
                    </div>

                </div>

                <div style="padding-top: 50px">
                </div>

                <div>
                    <input style="margin-left: 45%;" type="submit" value="Submit">
                </div>
            </EditForm>

            <div style="padding-top: 30px">
            </div>

            <div>
                <div>
                    <label class="Header">Radio Visibility </label>
                </div>

                <div>
                    <table>
                        <thead>
                        <tr>
                            <th>Connection Status</th>
                            <th>IP</th>
                            <th>Port</th>
                            <th>Radio Visible</th>
                            <th># of Logs</th>
                            <th></th>
                        </tr>
                        </thead>

                        <tbody>
                        @foreach (T6S3 radio in vm.Radios)
                        {
                            <tr>
                                <td style="text-align: center">
                                    <span class="@ConnectionStatus(radio)">&#x2B24;</span>
                                </td>
                                <td>@radio.GetFormatedIp()</td>
                                <td>@radio.Port</td>
                                <td style="text-align: center">

                                    @if (radio.IsHidden)
                                    {
                                        <span style="color: red;">&Cross;</span>
                                    }
                                    else
                                    {
                                        <span style="color: green;">&check;</span>
                                    }

                                </td>
                                <td>@radio.Logs.Count()</td>
                                <td>
                                    @if (radio.IsHidden)
                                    {
                                        <button class="btn btn-primary" @onclick="() => ToggleRadioVisibility(radio.Id, false)"> Show Radio </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-primary" @onclick="() => ToggleRadioVisibility(radio.Id, true)"> Hide Radio </button>
                                    }
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>

                <div style="padding-top: 30px">
                </div>

            </div>
        </div>
    </div>
</div>

<ConfirmationDialog @ref="confirmationDialog" Message="when changing these settings be mindful of your current connected devices. Would you like to continue?" ConfirmationChanged="HandleConfirmation"></ConfirmationDialog>


<InformativeDialog @ref="informativeDialog" OnClosed="HandleInformativeClosed"></InformativeDialog>

@code {
    string LastSubmitResult;
    private ConfirmationDialog confirmationDialog;
    private InformativeDialog informativeDialog;
    private EditContext editContext;

    private string IpAddress { get; set; }
    private int Port { get; set; }
    private ProtocolType ListeningProtocolType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IpAddress = vm.IpAddress;
        Port = vm.Port;
        ListeningProtocolType = vm.ListeningProtocolType;

        cs.Radios.CollectionChanged += RadiosOnCollectionChanged;
        foreach (T6S3 _radio in cs.Radios)
        {
            _radio.PropertyChanged += HandlePropertyChanged();
        }
    }

    private void RadiosOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.OldItems != null)
        {
            foreach (INotifyPropertyChanged item in e.OldItems)
                item.PropertyChanged -= HandlePropertyChanged();
        }
        if (e.NewItems != null)
        {
            foreach (INotifyPropertyChanged item in e.NewItems)
                item.PropertyChanged += HandlePropertyChanged();
        }
    }

    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) => { await InvokeAsync(() => { StateHasChanged(); }); };
    }

    async Task preFormSubmit(EditContext editContext)
    {
        this.editContext = editContext;
        if (vm.ListeningProtocolType != ListeningProtocolType || vm.IpAddress != IpAddress || vm.Port != Port)
        {
            confirmationDialog.Show();
        }
        else
        {
            FormSubmit();
        }
    }

    private string ConnectionStatus(T6S3 radio)
    {
        string result = string.Empty;
        switch (radio.Socket.ProtocolType)
        {
            case SPType.Udp:
                result = radio.UdpConnected ? "connected" : "disconnected ";
                break;
            case SPType.Tcp:
                result = radio.TcpConnected ? "connected" : "disconnected";
                break;
            default:
                throw new Exception("strange Protocol Type");
        }

        return result;
    }

    private async Task HandleConfirmation(bool result)
    {
        if (result)
        {
            FormSubmit();
        }
        else
        {
            informativeDialog.Show("Settings where not changed.", "red");
        }
    }

    private void FormSubmit()
    {
        bool formIsValid = editContext.Validate();
        LastSubmitResult =
            formIsValid
                ? "Success - form was valid"
                : "Failure - form was invalid";
        if (formIsValid is true)
        {
            vm.Submit();
            informativeDialog.Show("Settings where changed.", "green");

            IpAddress = vm.IpAddress;
            Port = vm.Port;
            ListeningProtocolType = vm.ListeningProtocolType;
        }
        else
        {
            informativeDialog.Show("Settings where not changed.", "red");
        }
    }

    private async Task HandleInformativeClosed()
    {
    }

    private void ToggleRadioVisibility(Guid radioId, bool value)
    {
        string message;
        vm.ToggleRadioVisibility(radioId, value);
        message = value is true ? "The Radio has been hidden." : "The Radio is no longer hidden.";
        informativeDialog.Show(message, "gray");
    }

}