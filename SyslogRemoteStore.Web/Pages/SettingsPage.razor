@page "/SettingsPage"
@using SPType = System.Net.Sockets.ProtocolType
@using SyslogRemoteStore.Web.Enums
@inject ISettingsViewModel vm
@inject CollectionStore cs
<style>
         table {
       
             border-collapse: collapse;
         border: 0;
         }
     
         th, td {
             border: 0px solid #000;
             padding: 8px;
             text-align: left;
         }
     
         th {
             background-color: #f0f0f0;
         }
         
          label {
           font-weight: bold;
           display: block;
           margin-bottom: 5px;
          }


        input[type="text"] {
            padding: 8px;
            width: 200px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        /* Style for the label */
        label {
        display: block; /* Place the label on a new line */
        font-weight: bold;
        }

        /* Style for the dropdown menu */
        select {
        width: 200px; /* Adjust the width as needed */
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
        }

        /* Style for the label */
        label {
        display: block; /* Place the label on a new line */
        font-weight: bold;
        margin-bottom: 5px; /* Add some spacing below the label */
        }

        /* Style for the input box */
        input[type="number"] {
        width: 200px; /* Adjust the width as needed */
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
        }

        ol {
        padding-left: 20px; /* Add left padding for indentation */
        }

        li {
        margin: 5px 0; /* Add margin between list items */
        }

        /* Style for the submit button */
        input[type="submit"] {
        background-color: #4CAF50; /* Background color */
        color: white; /* Text color */
        padding: 10px 20px; /* Padding around text */
        border: none; /* Remove border */
        border-radius: 5px; /* Add rounded corners */
        cursor: pointer; /* Change cursor to pointer on hover */
        }

        /* Change button style on hover */
        input[type="submit"]:hover {
        background-color: #dimgrey; /* Darker background color on hover */
        }

    section {
        display: grid;
        grid-template-columns: 1fr 1fr; /* set column sizes here */
        grid-template-rows: auto auto; /* we want two rows */

        grid-gap: 10px; /* how far between cells? */
        grid-auto-flow: column; /* fill in by column, not row */
        /* temporary property for visualization */
        height: 150px;
    }

    .column {
        float: left;
        width: 25%;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }
    
    label.Header{
            font-size: x-large;
    }
    </style>

<div>
    <EditForm model="@vm" OnSubmit="@preFormSubmit">

        <div>
            <label class="Header" for="Header">Change Syslog Message Severity Colours</label>
        </div>

        <section>
            <div>
                <label for="Debug">Debug:</label>
                <input type="color" id="head" name="head" @bind="@vm.DebugHex"/>
            </div>
            <div>
                <label for="Info">Info:</label>
                <input type="color" id="head" name="head" @bind="@vm.InfoHex">
            </div>
            <div>
                <label for="Warning">Warning:</label>
                <input type="color" id="head" name="head" @bind="@vm.WarningHex">
            </div>
            <div>
                <label for="Error">Error:</label>
                <input type="color" id="head" name="head" @bind="@vm.ErrorHex">
            </div>
        </section>


        <div class="row">
            <div class="column">
                <label for="ProtocolTypeDropdown">Change Listening Proticals:</label>
                <select id="ProtocolTypeDropdown" @bind="vm.ListeningProtocolType">
                    @foreach (object? option in Enum.GetValues(typeof(ProtocolType)))
                    {
                        <option value="@((ProtocolType)option)">@((ProtocolType)option)</option>
                    }
                </select>
            </div>
            <div class="column">
                <label for="AvailableIpAddressDropdown">IP Addresses :</label>
                <select id="AvailableIpAddressDropdown" @bind="vm.IpAddress">
                    @foreach (string ip in vm.AvailableIpAddress)
                    {
                        <option value="@ip">@ip</option>
                    }
                </select>
            </div>
            <div class="column">
                <label for="integerInput">Change Listen Port:</label>
                <input type="number" id="integerInput" name="integerInput" @bind="vm.Port">
            </div>
            <div class="column"></div>
        </div>

        <div>
            <input type="submit" value="Submit">
        </div>
        
    </EditForm>


    <div>
        <div>
            <label class="Header">Radio Visibility</label>
        </div>
        <div>
            <table>
                <thead>
                <tr>
                    <th>Connection Status</th>
                    <th>IP</th>
                    <th>Port</th>
                    <th>Radio Visible</th>
                    <th># of Logs</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (T6S3 radio in vm.Radios)
                {
                    <tr>
                        <td style="text-align: center">
                            <span class="@ConnectionStatus(radio)">&#x2B24;</span>
                        </td>
                        <td>@radio.GetFormatedIp()</td>
                        <td>@radio.Port</td>
                        <td style="text-align: center">

                            @if (radio.IsHidden)
                            {
                                <span style="color: red;">&Cross;</span>
                            }
                            else
                            {
                                <span style="color: green;">&check;</span>
                            }

                        </td>
                        <td>@radio.Logs.Count()</td>
                        <td>
                            @if (radio.IsHidden)
                            {
                                <button class="btn btn-primary" @onclick="() => ToggleRadioVisibility(radio.Id, false)"> Show Radio </button>
                            }
                            else
                            {
                                <button  class="btn btn-primary" @onclick="() => ToggleRadioVisibility(radio.Id, true)"> Hide Radio </button>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<ConfirmationDialog @ref="confirmationDialog" Message="when changing these settings be mindful of your current connected devices. Would you like to continue?" ConfirmationChanged="HandleConfirmation"></ConfirmationDialog>


<InformativeDialog @ref="informativeDialog" OnClosed="HandleInformativeClosed"></InformativeDialog>
@code {
    string LastSubmitResult;
    private ConfirmationDialog confirmationDialog;
    private InformativeDialog informativeDialog;
    private EditContext editContext;
    
    private string IpAddress { get; set; } 
    private int Port { get; set; } 
    private ProtocolType ListeningProtocolType { get; set; } 
    
    protected override async Task OnInitializedAsync()
    {
        this.IpAddress = vm.IpAddress;
        this.Port = vm.Port;
        this.ListeningProtocolType = vm.ListeningProtocolType;
        
        cs.Radios.CollectionChanged += RadiosOnCollectionChanged;
        foreach (T6S3 _radio in cs.Radios)
        {
            _radio.PropertyChanged += HandlePropertyChanged();
        }
    }

    private void RadiosOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.OldItems != null)
        {
            foreach (INotifyPropertyChanged item in e.OldItems)
                item.PropertyChanged -= HandlePropertyChanged();
        }
        if (e.NewItems != null)
        {
            foreach (INotifyPropertyChanged item in e.NewItems)
                item.PropertyChanged += HandlePropertyChanged();
        }
    }

    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) => { await InvokeAsync(() => { StateHasChanged(); }); };
    }

    async Task preFormSubmit(EditContext editContext)
    {
        this.editContext = editContext;
        if (vm.ListeningProtocolType != this.ListeningProtocolType || vm.IpAddress != this.IpAddress || vm.Port != this.Port)
        {
            confirmationDialog.Show();
        }
        else
        {
            FormSubmit();
        }
    }

    private string ConnectionStatus(T6S3 radio)
    {
        
        string result = string.Empty;
        switch (radio.Socket.ProtocolType)
        {
            case SPType.Udp:
                result = radio.UdpConnected ? "connected" : "disconnected ";
                break;
            case SPType.Tcp:
                result = radio.TcpConnected ? "connected" : "disconnected";
                break;
            default:
                throw new Exception("strange Protocol Type");
        }

        return result;
    }

    private async Task HandleConfirmation(bool result)
    {
        if (result)
        {
            FormSubmit();
        }
        else
        {
            informativeDialog.Show("Settings where not changed.", "red");
        }
    }

    private void FormSubmit()
    {
        bool formIsValid = editContext.Validate();
        LastSubmitResult =
            formIsValid
                ? "Success - form was valid"
                : "Failure - form was invalid";
        if (formIsValid is true)
        {
            vm.Submit();
            informativeDialog.Show("Settings where changed.", "green");
            
            this.IpAddress = vm.IpAddress;
            this.Port = vm.Port;
            this.ListeningProtocolType = vm.ListeningProtocolType;
        }
        else
        {
            informativeDialog.Show("Settings where not changed.", "red");
        }
    }
    private async Task HandleInformativeClosed()
    {
    }

    private void ToggleRadioVisibility(Guid radioId, bool value)
    {
        string message;
        vm.ToggleRadioVisibility(radioId, value);
        message = value is true ? "The Radio has been hidden." : "The Radio is no longer hidden.";
        informativeDialog.Show(message, "gray");
    }

}