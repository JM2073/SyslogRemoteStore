@using System.Net.Sockets
@inject CollectionStore cs

<style>
    #tog {
        appearance: none;
        width: 0px;
        height: 0px;
    }

        #tog:checked {
            background-color: black;
        }

        #tog + nav#ham {
            display: block;
            position: fixed;
            top: 50px;
            bottom: 0;
            left: -300px;
            width: 300px;
            transition-duration: 100ms;
            overflow:scroll;
            -webkit-overflow-scrolling: touch;
        }

        #tog:checked + nav#ham {
            left: 0;
        }



    nav#ham > ul > li {
        border-bottom: 1px solid #808080;
    }

    nav#ham details li {
        margin-left: 2ch;
    }

    .nav-link{
        color: black;
        vertical-align: text-bottom;
        font-size: 25px;
    }

   .connected {
   color: #008000;
   }
   .disconnected{
   color: #ff0000;
   }
</style>

<body style="background-color: #C0C0C4;">

    <header class="masthead mb-auto row" style="background-color: #E1E1EA; border-radius: 25px;">
    <div class="col-md-1">
        <label class="inline-block p-1 border m-2 cursor-pointer z-50" for="tog">
            <img src="menu.png" alt="" style="height:40px; width:40px;">
        </label>
        <input type="checkbox" id="tog" checked>
        <nav id="ham" class="z-0 p-4 bg-slate-50">
            <ul>
                @foreach (IGrouping<string, IT6S3> radioIpGroups in cs.Radios.GroupBy(x => x.GetFormatedIp()))
                {
                    <li>
                        <details>
                            <summary>@radioIpGroups.Key</summary>
                            <ul>
                                @foreach (IT6S3 radio in radioIpGroups)
                                {
                                    <li class="@ConnectionStatus(radio)">
                                        <a href="/RadioPage/@radio.Id">@radio.Port</a>
                                    </li>
                                }
                            </ul>
                        </details>
                    </li>
                }
            </ul>
        </nav>
    </div>
    <div class="col-md-11">

        <nav class="nav nav-masthead justify-content-center">
            <a class="nav-link" href="LogView">Log View</a>
            <a class="nav-link" href="SettingsPage">Settings</a>
        </nav>
    </div>
</header>

</body>

@code {

    protected override async Task OnInitializedAsync()
    {
        cs.Radios.CollectionChanged += RadiosOnCollectionChanged;
    }

    private void RadiosOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.OldItems != null)
        {
            foreach (INotifyPropertyChanged item in e.OldItems)
                item.PropertyChanged -= HandlePropertyChanged();
        }
        if (e.NewItems != null)
        {
            foreach (INotifyPropertyChanged item in e.NewItems)
                item.PropertyChanged += HandlePropertyChanged();
        }
    }

    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) => { await InvokeAsync(() => { StateHasChanged(); }); };
    }

    private string ConnectionStatus(IT6S3 radio)
    {
        string result = string.Empty;
        switch (radio.Socket.ProtocolType)
        {
            case ProtocolType.Udp:
                result = radio.AlertFlag ? "disconnected" : "connected";
                break;
            case ProtocolType.Tcp:
                result = radio.TcpConnected ? "connected" : "disconnected";
                break;
            default:
                throw new Exception("strange Protocol Type");
        }

        return result;
    }




}