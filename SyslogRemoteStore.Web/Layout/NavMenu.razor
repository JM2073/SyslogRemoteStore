@using System.Net.Sockets
@inject CollectionStore cs

<style>
    #tog {
        appearance: none;
        width: 0px;
        height: 0px;
    }

        #tog:checked {
            background-color: #3B413C;
        }

        nav#ham {
            display: block;
/*            position: fixed;*/
            top: 50px;
            bottom: 0;
            left: -300px;
            width: 300px;
            transition-duration: 100ms;
            overflow:scroll;
            -webkit-overflow-scrolling: touch;
        }

        nav#ham {
            left: 0;
        }



    nav#ham > ul > li {
        border-bottom: 1px solid #808080;
    }

    nav#ham details li {
        margin-left: 2ch;
    }


    #container.cc{
        display: grid;
        grid-template-columns: 0fr 2fr;
        grid-template-rows: 100px 1fr;
        gap: 0px 0px;
        grid-template-areas:
            "header header"
            "aside main"
            ". .";
    }

    #container.cc-closed {
        display: grid;
        grid-template-columns: 0fr 2fr;
        grid-template-rows: 100px 1fr;
        gap: 0px 0px;
        grid-template-areas:
            "header header"
            "main main"
            ". .";
    }

    #container.p-3{
        padding: 0 !important;
        ;
    }

    aside.closed {
        display:none;
    }

    header {
        grid-area: header;

    }

    aside {
        grid-area: aside;

    }

    main {
        grid-area: main;

    }

    nav{
        height:100%;
        width:100%;
    }


</style>

    <header class="masthead mb-auto row" style="background-color: #AEB5B6;">
    <div class="col-md-1">
        <label class="inline-block p-1  m-2 cursor-pointer" for="tog">
            <img src="Hamburger-Icon.png" id="image" alt="" style="height:45px; width:45px;"/>
        </label>

    </div>

    <div class="col-md-11">

        <nav class="nav nav-masthead justify-content-center">
            <a class="nav-link" href="">Log View</a>
            <a class="nav-link" href="SettingsPage">Settings</a>
        </nav>
    </div>
</header>




<aside id="aside" class="closed">

<nav id="ham" class="z-0 p-4 bg-slate-50">
    <ul>
        @foreach (IGrouping<string, T6S3> radioIpGroups in cs.Radios.Where(x => x.IsHidden == false).GroupBy(x => x.GetFormatedIp()))
        {
            <li>
                <details>
                    <summary>@radioIpGroups.Key</summary>
                    <ul>
                        @foreach (T6S3 radio in radioIpGroups)
                        {
                            <li>
                                <span class="@(ConnectionStatus(radio))">&#x2B24;</span>
                                <a style="vertical-align: middle" href="/RadioPage/@radio.Id"> @(GetProtocalType(radio)) | @radio.Port</a>
                            </li>
                        }
                    </ul>
                </details>
            </li>
        }
    </ul>
</nav>

</aside>

@code {

    protected override async Task OnInitializedAsync()
    {
        cs.Radios.CollectionChanged += RadiosOnCollectionChanged;
        foreach (T6S3 _radio in cs.Radios)
        {
            _radio.PropertyChanged += HandlePropertyChanged();
        }
    }

    private void RadiosOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.OldItems != null)
        {
            foreach (INotifyPropertyChanged item in e.OldItems)
                item.PropertyChanged -= HandlePropertyChanged();
        }
        if (e.NewItems != null)
        {
            foreach (INotifyPropertyChanged item in e.NewItems)
                item.PropertyChanged += HandlePropertyChanged();
        }
    }

    private PropertyChangedEventHandler? HandlePropertyChanged()
    {
        return async (sender, e) =>
        {
            await InvokeAsync(() => { StateHasChanged(); });
        };
    }

    private string ConnectionStatus(T6S3 radio)
    {
        string result = string.Empty;
        switch (radio.Socket.ProtocolType)
        {
            case ProtocolType.Udp:
                result = radio.UdpConnected ? "connected" : "disconnected";
                break;
            case ProtocolType.Tcp:
                result = radio.TcpConnected ? "connected" : "disconnected";
                break;
            default:
                throw new Exception("strange Protocol Type");
        }

        return result;
    }


    private string GetProtocalType(T6S3 radio)
    {
        string result = string.Empty;
        switch (radio.Socket.ProtocolType)
        {
            case ProtocolType.Udp:
                result = "UDP";
                break;
            case ProtocolType.Tcp:
                result = "TCP";
                break;
            default:
                throw new Exception("strange Protocol Type");
        }

        return result;
    }

}